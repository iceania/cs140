			+--------------------+
			|        CS 140      |
         	        | PROJECT 1: THREADS |
		        |   DESIGN DOCUMENT  |
		        +--------------------+
								   
---- GROUP ----

Matthew Chum-Lum <mchunlum@stanford.edu>
Sam Oluwalana <soluwalana@stanford.edu>
John-Ashton Allen  <bglp05@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

   	 	      ALARM CLOCK
				     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
 //fixed.point.c
typedef int32_t fixed_point;

//thread.h
struct thread {

    // ------------ BEGIN CHANGES -------------//
    /* Owned by thread.c. */
	int64_t wake_time;           /* time used by thread sleep */

	/* Shared between thread.c and synch.c. */
	int tmp_priority;            /* priority used for priority donation */
	struct list held_locks;		 /* Locks that this thread currently owns*/
	struct lock* lockWaitedOn;   /* Lock Waited on by this thread. */

	int nice ;                   /* Nice value */
	fixed_point recent_cpu;      /* The recent amount of cpu this thread
	 	 	 	 	 	 	 	 	has used.*/
	// ------------- END CHANGES --------------//

}
//thread.c


/*The value passed to recalculate priority
 * In order to prevent it from moving a thread
 * from one ready queue to another ready queue*/
#define NO_SWITCH ((void*)1)

/* A list of blocked threads which are blocked
 * on a certain tick to transpire*/
static struct list sleep_list;

/* Queues used by the multi level feedback
 * queue scheduler */
static struct list mlfqs_queue[PRI_MAX+1];

/*Variable to track the load avg of the system*/
static fixed_point load_avg;

//sync.h
/* Lock. No longer layered over a semaphore
 * It has a holder, a boolean value telling
 * whether it is held or not, and a list of waiters,
 * The lock_priority. */
struct lock {
    struct thread *holder;      /* Thread holding lock . If no one is
     	 	 	 	 	 	 	   holding the lock it is available*/
    struct list_elem elem;		/* element in a held locks list */
    struct list waiters;		/* List of waiting threads */
	int lock_priority; 			/* The priority which is max over
							     * all threads which are waiting on this
							     * Will be the priority that that thread
							     * Which is holding the lock must have */
};

//sync.c
/* One semaphore in a list. */
struct semaphore_elem {
    struct list_elem elem;              /* List element. */
    struct semaphore semaphore;         /* This semaphore. */

    /* The thread that waits on this semaphore to become
     * available. */
    struct thread *thread;
};

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?